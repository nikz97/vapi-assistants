
export const VAPI_CALL_STATUSES = [
    "queued",
    "ringing",
    "in-progress",
    "forwarding",
    "ended",
] as const;

export type VapiCallStatus = (typeof VAPI_CALL_STATUSES)[number];

export enum VapiWebhookEnum {
    ASSISTANT_REQUEST = "assistant-request",
    FUNCTION_CALL = "function-call",
    STATUS_UPDATE = "status-update",
    CONVERSATION_UPDATE = "conversation-update",
    END_OF_CALL_REPORT = "end-of-call-report",
    HANG = "hang",
};

export interface VapiCall {
    id?: string;
    assistantId?: string;
    customerId?: string;
    phoneNumberId?: string;
    type?: string;
    startedAt?: string;
    endedAt?: string;
    transcript?: string;
    recordingUrl?: string;
    summary?: string;
    createdAt?: string;
    updatedAt?: string;
    phoneNumber?: string;
    status?: string;
    endedReason?: string;
    messages?: string;
    maxDurationSeconds?: number;
    metadata?: string;
};

interface BaseVapiPayload {
    call: VapiCall;
};

export interface EndOfCallReportPayload extends BaseVapiPayload {
  type: VapiWebhookEnum.END_OF_CALL_REPORT;
  endedReason: string;
  transcript: string;
  messages: ConversationMessage[];
  summary: string;
  recordingUrl?: string;
};

export interface AssistantRequestPayload extends BaseVapiPayload {
    type: VapiWebhookEnum.ASSISTANT_REQUEST;
};

export interface ChatCompletionMessageToolCall {
  /**
   * The ID of the tool call.
   */
  id: string;

  /**
   * The function that the model called.
   */
  function: ChatCompletionMessageToolCall.Function;

  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: 'function';
};

export namespace ChatCompletionMessageToolCall {
    /**
     * The function that the model called.
     */
    export interface Function {
      /**
       * The arguments to call the function with, as generated by the model in JSON
       * format. Note that the model does not always generate valid JSON, and may
       * hallucinate parameters not defined by your function schema. Validate the
       * arguments in your code before calling your function.
       */
      arguments: string;
  
      /**
       * The name of the function to call.
       */
      name: string;
    }
};

export interface EndOfCallReportPayload extends BaseVapiPayload {
    type: VapiWebhookEnum.END_OF_CALL_REPORT;
    endedReason: string;
    transcript: string;
    messages: ConversationMessage[];
    summary: string;
    recordingUrl?: string;
};

export interface ConversationMessage {
  role: "user" | "system" | "bot" | "function_call" | "function_result";
  message?: string;
  name?: string;
  args?: string;
  result?: string;
  time: number;
  endTime?: number;
  secondsFromStart: number;
};

export interface HangPayload extends BaseVapiPayload {
  type: VapiWebhookEnum.HANG;
}